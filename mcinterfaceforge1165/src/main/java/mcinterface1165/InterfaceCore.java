package mcinterface1165;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import minecrafttransportsimulator.items.components.AItemBase;
import minecrafttransportsimulator.mcinterface.IInterfaceCore;
import minecrafttransportsimulator.mcinterface.IWrapperItemStack;
import minecrafttransportsimulator.mcinterface.IWrapperNBT;
import net.minecraft.client.Minecraft;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.tags.ItemTags;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.registry.Registry;
import net.minecraftforge.fml.ModList;
import net.minecraftforge.registries.ForgeRegistries;

class InterfaceCore implements IInterfaceCore {
    @Override
    public String getGameVersion() {
        return Minecraft.getInstance().getLaunchedVersion();
    }

    @Override
    public boolean isModPresent(String modID) {
        return ModList.get().isLoaded(modID);
    }

    @Override
    public boolean isFluidValid(String fluidID) {
        return ForgeRegistries.FLUIDS.containsKey(new ResourceLocation(fluidID));
    }

    @Override
    public String getModName(String modID) {
        return ModList.get().getModContainerById(modID).get().getModInfo().getDisplayName();
    }
    
    @Override
    public void logError(String message) {
    	InterfaceLoader.LOGGER.error(message);
    }

    @Override
    public IWrapperNBT getNewNBTWrapper() {
        return new WrapperNBT();
    }

    @Override
    public IWrapperItemStack getAutoGeneratedStack(AItemBase item, IWrapperNBT data) {
        WrapperItemStack newStack = new WrapperItemStack(new ItemStack(BuilderItem.itemMap.get(item)));
        newStack.setData(data);
        return newStack;
    }

    @SuppressWarnings("deprecation")
    @Override
    public IWrapperItemStack getStackForProperties(String name, int meta, int qty) {
        Item item = Registry.ITEM.get(ResourceLocation.tryParse(name));
        if (item != null) {
            return new WrapperItemStack(new ItemStack(item, qty));
        } else {
            return new WrapperItemStack(ItemStack.EMPTY.copy());
        }
    }

    @Override
    public String getStackItemName(IWrapperItemStack stack) {
        return ForgeRegistries.ITEMS.getKey(((WrapperItemStack) stack).stack.getItem()).toString();
    }

    @Override
    public boolean isOredictMatch(IWrapperItemStack stackA, IWrapperItemStack stackB) {
        Collection<ResourceLocation> aTags = ItemTags.getAllTags().getMatchingTags(((WrapperItemStack) stackA).stack.getItem());
        Collection<ResourceLocation> bTags = ItemTags.getAllTags().getMatchingTags(((WrapperItemStack) stackB).stack.getItem());
        for (ResourceLocation aTag : aTags) {
            if (bTags.contains(aTag)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public List<IWrapperItemStack> getOredictMaterials(String oreName, int stackSize) {
        List<IWrapperItemStack> stacks = new ArrayList<>();
        ItemTags.getAllTags().getTag(new ResourceLocation(oreName)).getValues().forEach(item -> stacks.add(new WrapperItemStack(new ItemStack(item, stackSize))));
        return stacks;
    }
}
