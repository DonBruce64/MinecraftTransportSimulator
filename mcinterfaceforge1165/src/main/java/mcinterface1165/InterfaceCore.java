package mcinterface1165;

import java.util.ArrayList;
import java.util.List;

import minecrafttransportsimulator.items.components.AItemBase;
import minecrafttransportsimulator.mcinterface.IInterfaceCore;
import minecrafttransportsimulator.mcinterface.IWrapperItemStack;
import minecrafttransportsimulator.mcinterface.IWrapperNBT;
import net.minecraft.client.Minecraft;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.NonNullList;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.registry.Registry;
import net.minecraftforge.fml.ModList;
import net.minecraftforge.oredict.OreDictionary;
import net.minecraftforge.registries.ForgeRegistries;

class InterfaceCore implements IInterfaceCore {
    @Override
    public String getGameVersion() {
        return Minecraft.getInstance().getLaunchedVersion();
    }

    @Override
    public boolean isModPresent(String modID) {
        return ModList.get().isLoaded(modID);
    }

    @Override
    public boolean isFluidValid(String fluidID) {
        return ForgeRegistries.FLUIDS.containsKey(new ResourceLocation(fluidID));
    }

    @Override
    public String getModName(String modID) {
        return ModList.get().getModContainerById(modID).get().getModInfo().getDisplayName();
    }
    
    @Override
    public void logError(String message) {
    	InterfaceLoader.LOGGER.error(message);
    }

    @Override
    public IWrapperNBT getNewNBTWrapper() {
        return new WrapperNBT();
    }

    @Override
    public IWrapperItemStack getAutoGeneratedStack(AItemBase item, IWrapperNBT data) {
        WrapperItemStack newStack = new WrapperItemStack(new ItemStack(BuilderItem.itemMap.get(item)));
        newStack.setData(data);
        return newStack;
    }

    @SuppressWarnings("deprecation")
    @Override
    public IWrapperItemStack getStackForProperties(String name, int meta, int qty) {
        Item item = Registry.ITEM.get(ResourceLocation.tryParse(name));
        if (item != null) {
            return new WrapperItemStack(new ItemStack(item, qty));
        } else {
            return new WrapperItemStack(ItemStack.EMPTY.copy());
        }
    }

    @Override
    public String getStackItemName(IWrapperItemStack stack) {
        return ForgeRegistries.ITEMS.getKey(((WrapperItemStack) stack).stack.getItem()).toString();
    }

    @Override
    public boolean isOredictMatch(IWrapperItemStack stackA, IWrapperItemStack stackB) {
        return OreDictionary.itemMatches(((WrapperItemStack) stackA).stack, ((WrapperItemStack) stackB).stack, false);
    }

    @Override
    public List<IWrapperItemStack> getOredictMaterials(String oreName, int stackSize) {
        NonNullList<ItemStack> oreDictStacks = OreDictionary.getOres(oreName, false);
        List<IWrapperItemStack> stacks = new ArrayList<>();
        for (ItemStack stack : oreDictStacks) {
            if (stack.getMetadata() == net.minecraftforge.oredict.OreDictionary.WILDCARD_VALUE) {
                NonNullList<ItemStack> oreDictSubStacks = NonNullList.create();
                stack.getItem().getSubItems(CreativeTabs.SEARCH, oreDictSubStacks);
                for (ItemStack subStack : oreDictSubStacks) {
                    ItemStack editedStack = subStack.copy();
                    editedStack.setCount(stackSize);
                    stacks.add(new WrapperItemStack(editedStack));
                }

            } else {
                ItemStack editedStack = stack.copy();
                editedStack.setCount(stackSize);
                stacks.add(new WrapperItemStack(editedStack));
            }

        }
        return stacks;
    }
}
