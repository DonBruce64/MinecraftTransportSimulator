package mcinterface1182;

import minecrafttransportsimulator.items.components.AItemBase;
import minecrafttransportsimulator.mcinterface.IInterfaceCore;
import minecrafttransportsimulator.mcinterface.IWrapperItemStack;
import minecrafttransportsimulator.mcinterface.IWrapperNBT;
import net.minecraft.block.Blocks;
import net.minecraft.core.Registry;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.tags.Tag;
import net.minecraft.tags.ItemTags;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.registry.Registry;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.block.Blocks;
import net.minecraftforge.fml.ModContainer;
import net.minecraftforge.fml.ModList;
import net.minecraftforge.registries.ForgeRegistries;

import java.io.InputStream;
import java.util.*;

class InterfaceCore implements IInterfaceCore {
    protected static final Map<String, List<BuilderItem>> taggedItems = new HashMap<>();

    @Override
    public boolean isGameFlattened() {
        return true;
    }

    @Override
    public boolean isModPresent(String modID) {
        return ModList.get().isLoaded(modID);
    }

    @Override
    public boolean isFluidValid(String fluidID) {
        return ForgeRegistries.FLUIDS.containsKey(new ResourceLocation(fluidID));
    }

    @Override
    public String getModName(String modID) {
        return ModList.get().getModContainerById(modID).get().getModInfo().getDisplayName();
    }
    
    @Override
    public InputStream getPackResource(String resource) {
        int assetsIndexEnd = resource.indexOf("assets/") + "assets/".length();
        int modIDEnd = resource.indexOf("/", assetsIndexEnd + 1);
        String modID = resource.substring(assetsIndexEnd, modIDEnd);
        Optional<? extends ModContainer> optional = ModList.get().getModContainerById(modID);
        if (optional.isPresent()) {
            InputStream stream = optional.get().getMod().getClass().getResourceAsStream(resource);
            if (stream != null) {
                return stream;
            }
        }
        //Try to get a Minecraft texture, we use the classloader of the block class, since it's common to servers and clients.
        return Blocks.AIR.getClass().getResourceAsStream(resource);
    }

    @Override
    public void logError(String message) {
        InterfaceLoader.LOGGER.error("MTSERROR: " + message);
    }

    @Override
    public IWrapperNBT getNewNBTWrapper() {
        return new WrapperNBT();
    }

    @Override
    public IWrapperItemStack getAutoGeneratedStack(AItemBase item, IWrapperNBT data) {
        WrapperItemStack newStack = new WrapperItemStack(new ItemStack(BuilderItem.itemMap.get(item)));
        newStack.setData(data);
        return newStack;
    }

    @SuppressWarnings("deprecation")
    @Override
    public IWrapperItemStack getStackForProperties(String name, int meta, int qty) {
        Item item = Registry.ITEM.get(ResourceLocation.tryParse(name));
        if (item != null) {
            return new WrapperItemStack(new ItemStack(item, qty));
        } else {
            return new WrapperItemStack(ItemStack.EMPTY.copy());
        }
    }

    @Override
    public String getStackItemName(IWrapperItemStack stack) {
        return ForgeRegistries.ITEMS.getKey(((WrapperItemStack) stack).stack.getItem()).toString();
    }

    @Override
    public boolean isOredictMatch(IWrapperItemStack stackA, IWrapperItemStack stackB) {
        return ((WrapperItemStack) stackA).stack.sameItem(((WrapperItemStack) stackB).stack);
    }

    @Override
    public List<IWrapperItemStack> getOredictMaterials(String oreName, int stackSize) {
        //Convert to lowercase in case we are camelCase from oreDict systems.
        String lowerCaseOre = oreName.toLowerCase(Locale.ROOT);
        List<IWrapperItemStack> stacks = new ArrayList<>();
        Tag<Item> tag = ItemTags.getAllTags().getTag(new ResourceLocation("minecraft", lowerCaseOre));
        if (tag == null) {
            tag = ItemTags.getAllTags().getTag(new ResourceLocation("forge", lowerCaseOre));
        }
        if (tag == null) {
            List<BuilderItem> items = taggedItems.get(lowerCaseOre);
            if (items != null) {
                items.forEach(item -> stacks.add(new WrapperItemStack(new ItemStack(item, stackSize))));
            }
        } else {
            tag.getValues().forEach(item -> stacks.add(new WrapperItemStack(new ItemStack(item, stackSize))));
        }

        return stacks;
    }
}
