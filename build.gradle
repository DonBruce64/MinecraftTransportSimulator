buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
				maven { url = "https://repo.spongepowered.org/maven" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
				classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

//Apply plugins
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'

//Set file name.
version = "1.12.2-21.2.0-BETA9"
group= "minecrafttransportsimulator"
archivesBaseName = "Immersive Vehicles"

//Options for Java version to compile to.
//java.toolchain.languageVersion = JavaLanguageVersion.of(8)
//Don't need these with toolchain?
sourceCompatibility = targetCompatibility = '1.8'
compileJava {
	sourceCompatibility = targetCompatibility = '1.8'
	options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

//Minecraft mappings and run configs.
minecraft {
	// The mappings can be changed at any time, and must be in the following format.
	// Channel:   Version:
	// snapshot   YYYYMMDD   Snapshot are built nightly.
	// stable     #          Stables are built at the discretion of the MCP team.
	// official   MCVersion  Official field/method names from Mojang mapping files
	mappings channel: 'stable', version: '39-1.12'
	
	//Run configurations.
	runs {
		client {
				workingDirectory project.file('run')
		}

		server {
				workingDirectory project.file('run')
		}
	}
}

repositories {
  maven { url = 'https://mvnrepository.com/artifact/org.jcraft/jorbis'}
  //Location of the maven that hosts JEI files
	maven {url = "https://dvs1.progwml6.com/files/maven/"}
}

//Configuration that holds jars to include in the jar
configurations {
    embed
    compile.extendsFrom(embed)
}

//Specify dependencies.
dependencies {
	//Version of Minecraft to use.
  minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2859'

	//Set sound code bits as embeds so they are included into the jar.
  embed(group: 'com.googlecode.soundlibs', name: 'jlayer', version: '1.0.1.4')
	embed(group: 'org.jcraft', name: 'jorbis', version: '0.0.17')
	
	//Compile against the JEI API but do not include it at runtime
  compileOnly fg.deobf("mezz.jei:jei_1.12.2:4.16.1.302:api")
  //At runtime, use the full JEI jar
	//Disabled as Access Transformers don't work on FG 3.0 runtimes despite them saying they do.
	//Not a huge issue, as it just prevents using JEI in-dev, and we already have it working so don't really need to test.
  //runtimeOnly fg.deobf("mezz.jei:jei_1.12.2:4.16.1.302")



    // Mixin

	//Embed mixins into the code.
	//embed('org.spongepowered:mixin:0.8.5')
    // Idk about this but I always use a MixinBootstrap mod. @edeka

    implementation('org.spongepowered:mixin:0.8.4') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }

	//Apply Mixin AP ForgeGradle.
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

//Set mixin properties.
//Note, createSrgToMcp and createMcpToSrg tasks need to be run before this.
//mixin {
  //add sourceSets.main, "mts.refmap.json"
	//config "mts.mixins.json"
//}


// Add mixin refmap
mixin {
    add sourceSets.main, "immersive_vehicles.mixin-refmap.json"
}



//Here is where we zip up all embeds and add them to our jar.
jar {
    from {
        configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Mixin
    manifest {
        attributes "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
        attributes "TweakOrder": "0"
        attributes "MixinConfigs": "immersive_vehicles.mixin.json"

        // Do this so that the actual mod content gets loaded too and not only the mixins.
        attributes "FMLCorePluginContainsFMLMod": true
        attributes "ForceLoadAsMod": true
    }
}

//Now compile the mod.
jar.finalizedBy('reobfJar') 
